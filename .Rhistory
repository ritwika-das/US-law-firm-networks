labels = c("Partner", "Associate")))
g_adv_net %v% "Gender_f"   <- as.character(factor(v$Gender,
levels = c(1, 2),
labels = c("Male", "Female")))
g_adv_net %v% "Office_f"   <- as.character(factor(v$Office,
levels = c(1, 2, 3),
labels = c("Boston", "Hartford", "Providence")))
g_adv_net %v% "Practice_f" <- as.character(factor(v$Practice,
levels = c(1, 2),
labels = c("Litigation", "Corporate")))
# 3d. Leave Age continuous
g_adv_net %v% "Age"        <- v$Age
#### 4. Fit the ERGM ####
# Terms:
#  a) nodecov("Age")         → effect of age on overall activity
#  b) nodeifactor("Status_f")→ effect of status on incoming ties
#  c) nodeofactor("Status_f")→ effect of status on outgoing ties
#  d) nodematch("Gender_f")  → gender homophily
#  e) nodematch("Office_f")  → office homophily
#  f) nodematch("Practice_f")-> practice homophily
model_adv <- ergm(
g_adv_net ~
edges +
nodecov("Age") +
nodeifactor("Status_f") +
nodeofactor("Status_f") +
nodematch("Gender_f") +
nodematch("Office_f") +
nodematch("Practice_f"),
control = control.ergm(MCMLE.maxit = 20)
)
#### 5. Summarize & compute odds ratios, CIs, and significance ★ ####
s    <- summary(model_adv)
cf   <- s$coefficients
od   <- exp(cf[, "Estimate"])
res <- tibble(
Term       = rownames(cf),
Estimate   = cf[, "Estimate"],
Std.Error  = cf[, "Std. Error"],
`p-value`  = cf[, "Pr(>|z|)"],
`Odds Ratio` = od
) %>%
mutate(
# 95% CI
CI.lower = Estimate - 1.96 * Std.Error,
CI.upper = Estimate + 1.96 * Std.Error,
# Round for display
across(c(Estimate, Std.Error, CI.lower, CI.upper, `Odds Ratio`),
~ round(.x, 3)),
`p-value` = round(`p-value`, 3),
Signif    = case_when(
`p-value` < 0.001 ~ "***",
`p-value` < 0.01  ~ "**",
`p-value` < 0.05  ~ "*",
TRUE              ~ ""
)
)
#### 6. Print results table ####
knitr::kable(
res,
caption = paste0(
"ERGM on Advice Network:\n",
"a) Age (activity), b) Status in/out, c–e) homophily terms\n",
"Signif. codes: *** p<0.001; ** p<0.01; * p<0.05"
),
col.names = c("Term","Estimate","Std. Error","p-value","Odds Ratio",
"CI Lower","CI Upper",""),
align     = "lrrrrrrc",
booktabs  = TRUE
)
#### 7. Goodness‐of‐Fit diagnostics ####
gof_adv <- gof(
model_adv,
GOF = ~ idegree + odegree + espartners + dspartners + distance
)
print(gof_adv)
plot(gof_adv)
#### 1. Load required packages ####
library(igraph)
library(network)
library(ergm)
library(sna)
library(dplyr)
library(knitr)
#### 2. Read data and build the advice igraph ####
law_adv <- read.csv("Law_Advice.csv", header = TRUE, as.is = TRUE)
law_att <- read.csv("Law_NodeAtt.csv", header = TRUE, as.is = TRUE)
colnames(law_adv) <- c("from", "to")
g_adv <- graph_from_data_frame(
d        = law_adv,
directed = TRUE,
vertices = law_att
)
#### 3. Convert to a network object and recode attributes ####
# 3a. Adjacency matrix → network
amat <- as.matrix(as_adjacency_matrix(g_adv, sparse = FALSE))
g_adv_net <- network(
amat,
directed    = TRUE,
loops       = FALSE,
vertex.attr = igraph::vertex.attributes(g_adv)
)
# 3b. Extract original vertex attributes
v <- vertex.attributes(g_adv)
# 3c. Recode categorical attrs as plain character vectors
g_adv_net %v% "Status" <- factor(
v$Status,
levels = c(1, 2),
labels = c("Partner", "Associate")
)
#### 1. Load required packages ####
library(igraph)
library(network)
library(ergm)
library(sna)
library(dplyr)
library(knitr)
#### 2. Read data and build the advice igraph ####
law_adv <- read.csv("Law_Advice.csv", header = TRUE, as.is = TRUE)
law_att <- read.csv("Law_NodeAtt.csv", header = TRUE, as.is = TRUE)
colnames(law_adv) <- c("from", "to")
g_adv <- graph_from_data_frame(
d        = law_adv,
directed = TRUE,
vertices = law_att
)
#### 3. Convert to a network object and recode attributes ####
# 3a. Adjacency matrix → network
amat <- as.matrix(as_adjacency_matrix(g_adv, sparse = FALSE))
g_adv_net <- network(
amat,
directed    = TRUE,
loops       = FALSE,
vertex.attr = igraph::vertex.attributes(g_adv)
)
# 3b. Extract original vertex attributes
v <- vertex.attributes(g_adv)
# 3c. Recode categorical attrs as plain character (so ergm sees them as factors)
g_adv_net %v% "Status"   <- as.character(
factor(v$Status,
levels = c(1, 2),
labels = c("Partner", "Associate"))
)
g_adv_net %v% "Gender"   <- as.character(
factor(v$Gender,
levels = c(1, 2),
labels = c("Male", "Female"))
)
g_adv_net %v% "Office"   <- as.character(
factor(v$Office,
levels = c(1, 2, 3),
labels = c("Boston", "Hartford", "Providence"))
)
g_adv_net %v% "Practice" <- as.character(
factor(v$Practice,
levels = c(1, 2),
labels = c("Litigation", "Corporate"))
)
# 3d. Leave Age continuous
g_adv_net %v% "Age" <- v$Age
#### 4. Fit the ERGM ####
# a) nodecov("Age")         → effect of age on overall activity
# b) nodeifactor("Status")  → effect of status on incoming ties
# c) nodeofactor("Status")  → effect of status on outgoing ties
# d) nodematch("Gender")    → gender homophily
# e) nodematch("Office")    → office homophily
# f) nodematch("Practice")  → practice homophily
model_adv <- ergm(
g_adv_net ~
edges +
nodecov("Age") +
nodeifactor("Status") +
nodeofactor("Status") +
nodematch("Gender") +
nodematch("Office") +
nodematch("Practice"),
control = control.ergm(MCMLE.maxit = 20)
)
#### 5. Summarize & compute odds ratios, CIs, and significance stars ####
s  <- summary(model_adv)
cf <- s$coefficients
od <- exp(cf[, "Estimate"])
res <- tibble(
Term       = rownames(cf),
Estimate   = cf[, "Estimate"],
Std.Error  = cf[, "Std. Error"],
`p-value`  = cf[, "Pr(>|z|)"],
`Odds Ratio` = od
) %>%
mutate(
CI.lower = Estimate - 1.96 * Std.Error,
CI.upper = Estimate + 1.96 * Std.Error,
across(c(Estimate, Std.Error, CI.lower, CI.upper, `Odds Ratio`),
~ round(.x, 3)),
`p-value` = round(`p-value`, 3),
Signif    = case_when(
`p-value` < 0.001 ~ "***",
`p-value` < 0.01  ~ "**",
`p-value` < 0.05  ~ "*",
TRUE              ~ ""
)
)
#### 6. Print results table ####
knitr::kable(
res,
caption = paste0(
"ERGM on Advice Network:\n",
"a) Age (activity), b) Status in/out, c–e) homophily terms\n",
"Signif. codes: *** p<0.001; ** p<0.01; * p<0.05"
),
col.names = c("Term","Estimate","Std. Error","p-value","Odds Ratio",
"CI Lower","CI Upper",""),
align     = "lrrrrrrc",
booktabs  = TRUE
)
#### 7. Goodness‐of‐Fit diagnostics ####
gof_adv <- gof(
model_adv,
GOF = ~ idegree + odegree + espartners + dspartners + distance
)
print(gof_adv)
plot(gof_adv)
#### 1. Load packages ####
library(igraph)
library(network)
library(ergm)
library(sna)
library(dplyr)
library(knitr)
#### 2. Build Advice network ####
law_adv <- read.csv("Law_Advice.csv",  header=TRUE, as.is=TRUE)
law_att <- read.csv("Law_NodeAtt.csv", header=TRUE, as.is=TRUE)
colnames(law_adv) <- c("from","to")
g_adv <- graph_from_data_frame(law_adv, directed=TRUE, vertices=law_att)
#### 3. To network object & recode attrs ####
amat <- as.matrix(as_adjacency_matrix(g_adv, sparse=FALSE))
g_net <- network(amat, directed=TRUE, loops=FALSE,
vertex.attr=vertex.attributes(g_adv))
v <- vertex.attributes(g_adv)
g_net %v% "Age"      <- v$Age
g_net %v% "Status"   <- factor(v$Status,   levels=1:2, labels=c("Partner","Associate"))
#### 1. Load packages ####
library(igraph)
library(network)
library(ergm)
library(sna)
library(dplyr)
library(knitr)
#### 2. Read data & build igraph Advice network ####
law_adv <- read.csv("Law_Advice.csv",  header = TRUE, as.is = TRUE)
law_att <- read.csv("Law_NodeAtt.csv", header = TRUE, as.is = TRUE)
colnames(law_adv) <- c("from", "to")
g_adv <- graph_from_data_frame(
law_adv,
directed = TRUE,
vertices = law_att
)
#### 3. Convert to network::network & recode attrs ####
# 3a. To adjacency matrix → network object (grabs raw numeric attrs)
amat <- as.matrix(as_adjacency_matrix(g_adv, sparse = FALSE))
g_net <- network(
amat,
directed    = TRUE,
loops       = FALSE,
vertex.attr = vertex.attributes(g_adv)
)
# 3b. Pull out the original igraph vertex attributes
v <- vertex.attributes(g_adv)
# 3c. Recode categoricals as character so network accepts them
g_net %v% "Status"   <- as.character(factor(v$Status,
levels = c(1, 2),
labels = c("Partner","Associate")))
g_net %v% "Gender"   <- as.character(factor(v$Gender,
levels = c(1, 2),
labels = c("Male","Female")))
g_net %v% "Office"   <- as.character(factor(v$Office,
levels = c(1, 2, 3),
labels = c("Boston","Hartford","Providence")))
g_net %v% "Practice" <- as.character(factor(v$Practice,
levels = c(1, 2),
labels = c("Litigation","Corporate")))
# Leave Age numeric
g_net %v% "Age"      <- v$Age
#### 4. Fit the ERGM ####
model_adv <- ergm(
g_net ~
edges +
nodecov("Age") +               # a) Age (overall activity)
nodeifactor("Status") +        # b) Status on incoming ties
nodeofactor("Status") +        # c) Status on outgoing ties
nodematch("Gender") +          # d) Gender homophily
nodematch("Office") +          # e) Office homophily
nodematch("Practice"),         # f) Practice homophily
control = control.ergm(MCMLE.maxit = 20)
)
#### 5. Extract & relabel results ####
s   <- summary(model_adv)
cf  <- s$coefficients
od  <- exp(cf[, "Estimate"])
res <- tibble(
raw = rownames(cf),
Estimate  = cf[, "Estimate"],
Std.Error = cf[, "Std. Error"],
p.value   = cf[, "Pr(>|z|)"],
Odds.Ratio= od
) %>%
mutate(
Term = recode(raw,
nodecov.Age             = "a) Age (overall activity)",
nodeifactor.Status.Partner   = "b) Status on incoming ties (Partner)",
nodeifactor.Status.Associate = "b) Status on incoming ties (Associate)",
nodeofactor.Status.Partner   = "c) Status on outgoing ties (Partner)",
nodeofactor.Status.Associate = "c) Status on outgoing ties (Associate)",
nodematch.Gender        = "d) Gender homophily",
nodematch.Office        = "e) Office homophily",
nodematch.Practice      = "f) Practice homophily",
.default = raw
),
CI.lower = Estimate - 1.96 * Std.Error,
CI.upper = Estimate + 1.96 * Std.Error,
across(c(Estimate, Std.Error, CI.lower, CI.upper, Odds.Ratio),
~ round(.x, 3)),
p.value = round(p.value, 3),
Signif  = case_when(
p.value < 0.001 ~ "***",
p.value < 0.01  ~ "**",
p.value < 0.05  ~ "*",
TRUE            ~ ""
)
) %>%
select(Term, Estimate, `Std.Error`, `p-value` = p.value,
`Odds Ratio` = Odds.Ratio, `CI Lower` = CI.lower,
`CI Upper` = CI.upper, Signif)
knitr::kable(
res,
caption = paste0(
"ERGM on Advice Network:\n",
"a) Age, b/c) Status in/out, d–f) homophily\n",
"Signif. codes: *** p<0.001; ** p<0.01; * p<0.05"
),
align   = "lrrrrrrc",
booktabs= TRUE
)
#### 6. Goodness‐of‐Fit ####
gof_adv <- gof(model_adv,
GOF = ~ idegree + odegree + espartners + dspartners + distance
)
print(gof_adv)
plot(gof_adv)
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
results = 'asis')
law_adv <- read.csv("Law_Advice.csv", header = TRUE, as.is = TRUE)
law_frnd <- read.csv("Law_Friendship.csv", header = TRUE, as.is = TRUE)
law_cow <- read.csv("Law_CoWork.csv", header = TRUE, as.is = TRUE)
law_att <- read.csv("Law_NodeAtt.csv", header = TRUE, as.is = TRUE)
# Standardising column names of edge lists for igraph
colnames(law_adv)  <- c("from", "to")
colnames(law_cow)  <- c("from", "to")
colnames(law_frnd) <- c("from", "to")
# Create each layer as a directed igraph, attaching vertex attributes from law_att
# Advice network
g_adv <- graph_from_data_frame(d = law_adv, directed = TRUE, vertices = law_att)
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
results = 'asis')
law_adv <- read.csv("Law_Advice.csv", header = TRUE, as.is = TRUE)
law_frnd <- read.csv("Law_Friendship.csv", header = TRUE, as.is = TRUE)
law_cow <- read.csv("Law_CoWork.csv", header = TRUE, as.is = TRUE)
law_att <- read.csv("Law_NodeAtt.csv", header = TRUE, as.is = TRUE)
# Standardising column names of edge lists for igraph
colnames(law_adv)  <- c("from", "to")
colnames(law_cow)  <- c("from", "to")
colnames(law_frnd) <- c("from", "to")
# Create each layer as a directed igraph, attaching vertex attributes from law_att
# Advice network
g_adv <- graph_from_data_frame(d = law_adv, directed = TRUE, vertices = law_att)
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
results = 'asis')
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
results = 'asis')
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
results = 'asis')
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
results = 'asis')
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
results = 'asis')
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
results = 'asis')
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
results = 'asis')
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
results = 'asis')
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
results = 'asis')
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
results = 'asis')
library(reticulate)
# point to your conda or virtualenv where leidenalg is installed
use_condaenv("r-reticulate")
conda --version
Sys.which("conda")
conda_create("r-reticulate")
conda --version
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
results = 'asis')
use_condaenv("r-reticulate", conda = "C:/Users/Das/anaconda3/Scripts/conda.exe")
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
results = 'asis')
law_adv <- read.csv("Law_Advice.csv", header = TRUE, as.is = TRUE)
law_frnd <- read.csv("Law_Friendship.csv", header = TRUE, as.is = TRUE)
law_cow <- read.csv("Law_CoWork.csv", header = TRUE, as.is = TRUE)
law_att <- read.csv("Law_NodeAtt.csv", header = TRUE, as.is = TRUE)
# Standardising column names of edge lists for igraph
colnames(law_adv)  <- c("from", "to")
colnames(law_cow)  <- c("from", "to")
colnames(law_frnd) <- c("from", "to")
# Create each layer as a directed igraph, attaching vertex attributes from law_att
# Advice network
g_adv <- graph_from_data_frame(d = law_adv, directed = TRUE, vertices = law_att)
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
results = 'asis')
law_adv <- read.csv("Law_Advice.csv", header = TRUE, as.is = TRUE)
law_frnd <- read.csv("Law_Friendship.csv", header = TRUE, as.is = TRUE)
law_cow <- read.csv("Law_CoWork.csv", header = TRUE, as.is = TRUE)
law_att <- read.csv("Law_NodeAtt.csv", header = TRUE, as.is = TRUE)
# Standardising column names of edge lists for igraph
colnames(law_adv)  <- c("from", "to")
colnames(law_cow)  <- c("from", "to")
colnames(law_frnd) <- c("from", "to")
# Create each layer as a directed igraph, attaching vertex attributes from law_att
# Advice network
g_adv <- graph_from_data_frame(d = law_adv, directed = TRUE, vertices = law_att)
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
results = 'asis')
library(reticulate)
# Point to the correct Conda environment and binary
use_condaenv("r-reticulate", conda = "C:/Users/Das/anaconda3/Scripts/conda.exe")
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
results = 'asis')
# Point to the correct Conda environment and binary
use_condaenv("r-reticulate", conda = "C:/Users/Das/anaconda3/Scripts/conda.exe")
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
results = 'asis')
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
results = 'asis')
law_adv <- read.csv("Law_Advice.csv", header = TRUE, as.is = TRUE)
law_frnd <- read.csv("Law_Friendship.csv", header = TRUE, as.is = TRUE)
law_cow <- read.csv("Law_CoWork.csv", header = TRUE, as.is = TRUE)
law_att <- read.csv("Law_NodeAtt.csv", header = TRUE, as.is = TRUE)
# Standardising column names of edge lists for igraph
colnames(law_adv)  <- c("from", "to")
colnames(law_cow)  <- c("from", "to")
colnames(law_frnd) <- c("from", "to")
# Create each layer as a directed igraph, attaching vertex attributes from law_att
# Advice network
g_adv <- graph_from_data_frame(d = law_adv, directed = TRUE, vertices = law_att)
